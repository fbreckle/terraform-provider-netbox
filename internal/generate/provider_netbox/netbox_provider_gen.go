// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package provider_netbox

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
)

func NetboxProviderSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"allow_insecure_https": schema.BoolAttribute{
				Optional:            true,
				Description:         "Flag to set whether to allow https with invalid certificates. Can be set via the `NETBOX_ALLOW_INSECURE_HTTPS` environment variable. Defaults to `false`.",
				MarkdownDescription: "Flag to set whether to allow https with invalid certificates. Can be set via the `NETBOX_ALLOW_INSECURE_HTTPS` environment variable. Defaults to `false`.",
			},
			"api_token": schema.StringAttribute{
				Required:            true,
				Description:         "Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.",
				MarkdownDescription: "Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.",
			},
			"headers": schema.MapAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "Set these header on all requests to Netbox. Can be set via the `NETBOX_HEADERS` environment variable",
				MarkdownDescription: "Set these header on all requests to Netbox. Can be set via the `NETBOX_HEADERS` environment variable",
			},
			"request_timeout": schema.NumberAttribute{
				Optional:            true,
				Description:         "Netbox API HTTP request timeout in seconds. Can be set via the `NETBOX_REQUEST_TIMEOUT` environment variable.",
				MarkdownDescription: "Netbox API HTTP request timeout in seconds. Can be set via the `NETBOX_REQUEST_TIMEOUT` environment variable.",
			},
			"server_url": schema.StringAttribute{
				Required:            true,
				Description:         "Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL` environment variable.",
				MarkdownDescription: "Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL` environment variable.",
			},
			"skip_version_check": schema.BoolAttribute{
				Optional:            true,
				Description:         "If true, do not try to determine the running Netbox version at provider startup. Disables warnings about possibly unsupported Netbox version. Also useful for local testing on terraform plans. Can be set via the `NETBOX_SKIP_VERSION_CHECK` environment variable. Defaults to `false`.",
				MarkdownDescription: "If true, do not try to determine the running Netbox version at provider startup. Disables warnings about possibly unsupported Netbox version. Also useful for local testing on terraform plans. Can be set via the `NETBOX_SKIP_VERSION_CHECK` environment variable. Defaults to `false`.",
			},
			"strip_trailing_slashes_from_url": schema.BoolAttribute{
				Optional:            true,
				Description:         "If true, strip trailing slashes from the `server_url` parameter and print a warning when doing so. Note that using trailing slashes in the `server_url` parameter will usually lead to errors. Can be set via the `NETBOX_STRIP_TRAILING_SLASHES_FROM_URL` environment variable. Defaults to `true`.",
				MarkdownDescription: "If true, strip trailing slashes from the `server_url` parameter and print a warning when doing so. Note that using trailing slashes in the `server_url` parameter will usually lead to errors. Can be set via the `NETBOX_STRIP_TRAILING_SLASHES_FROM_URL` environment variable. Defaults to `true`.",
			},
		},
	}
}

type NetboxModel struct {
	AllowInsecureHttps          types.Bool   `tfsdk:"allow_insecure_https"`
	ApiToken                    types.String `tfsdk:"api_token"`
	Headers                     types.Map    `tfsdk:"headers"`
	RequestTimeout              types.Number `tfsdk:"request_timeout"`
	ServerUrl                   types.String `tfsdk:"server_url"`
	SkipVersionCheck            types.Bool   `tfsdk:"skip_version_check"`
	StripTrailingSlashesFromUrl types.Bool   `tfsdk:"strip_trailing_slashes_from_url"`
}
